Bölüm 1: 
Bu bölüm, temiz kod kavramını ve neden önemli olduğunu ele alıyor.
Kötü kodun, yazılım projelerinde zamanla birikerek büyük sorunlara yol açabileceği, bakım maliyetini artırabileceği ve geliştirmeyi yavaşlatabileceği vurgulanıyor.
Temiz kod yazmanın bir zanaat olduğu, tıpkı diğer zanaatlar gibi ustalık gerektirdiği belirtiliyor.

Bölüm 2: Anlamlı İsimler
Bu bölüm, yazılımda kullanılan isimlerin (değişkenler, fonksiyonlar, sınıflar, paketler vb.) anlamlı ve açıklayıcı olması gerektiğini vurguluyor. 
Anlamlı isimler kullanmanın, kodun okunabilirliğini ve anlaşılırlığını artırdığı, böylece kodun bakımını ve geliştirilmesini kolaylaştırdığı belirtiliyor.
Bölümde, anlamlı isimler oluşturmak için kullanılabilecek bazı prensipler ve teknikler detaylandırılıyor:
Niyet Açığa Çıkaran İsimler Kullanın: Bir değişkenin veya fonksiyonun ne işe yaradığını ismiyle açıkça belirtin.
Yanlış Bilgi Vermeyin: İsimler, kodun işlevini doğru bir şekilde yansıtmalıdır.
Anlamlı Ayrımlar Yapın: Benzer isimler kullanarak karışıklığa neden olmaktan kaçının.
Telaffuz Edilebilir İsimler Kullanın: Kod hakkında konuşurken telaffuz edilebilir isimler kullanmak, iletişimi kolaylaştırır.
Aranabilir İsimler Kullanın: Kod içinde arama yaparken kolayca bulunabilecek isimler kullanın.
Kodlamalardan Kaçının: Macar Notasyonu gibi kodlamalar kullanmayın.
Zihinsel Haritalamadan Kaçının: İsimleri kısaltmayın veya kodun işlevini anlamak için zihinsel bir haritalama yapmayı gerektirmeyin.
Sezgisel Olmayın: Komik veya esprili isimler kullanmayın, açık ve net isimler tercih edin.
Kavram Başına Bir Kelime Seçin: Aynı kavram için farklı kelimeler kullanmaktan kaçının.
Kelime Oyunlarından Kaçının: İsimleri kelime oyunlarıyla karmaşıklaştırmayın.
Çözüm Alanı İsimleri Kullanın: Uygulama alanına özgü isimler kullanın.
Problem Alanı İsimleri Kullanın: Problem alanına özgü isimler kullanın.
Anlamlı Bağlam Ekleyin: İsimlere, gerektiğinde anlamlı bir bağlam ekleyin.
Gereksiz Bağlam Eklemeyin: İsimleri gereksiz uzatmayın.

Bölüm 3: Fonksiyonlar 
Küçük olmalı: fonksiyonların olabildiği kadar küçük olması gerekiyor
Tek bir şeyi yapmalı: bir fonksiyon yalnızca bir amacı gerçekleştirmek için yazılmalı, birden fazla iş yapıyorsa, anlaşılması ve test edilmesi daha zor olacaktır.
Tek amaçlılığı test etmenin bir yolu da, içerisinden başka isimde bir fonksiyon daha çıkarabiliyorsak o tek bir şeyi yapmıyor demektir.
Fonksiyonlar üstten alta okulmalıdır. Kod, yukarıdan aşağıya doğru okunan bir hikaye gibi okunmalıdır.
Biricik Soyutlama seviyesi.
Fonksiyon Argümanları: mümkünse 0 (niladic) gerekirse 1 (monadic) 2 (dyadic) de olabilir mümkünse 3 (triadic) kullanma
üçten fazlası (polyadic) çok özel gerekçe gerektirir o yüzden kullanılmamalı.
Fonksiyonlara "Flag" argümanları girmek doğru değildir ve fonksiyonu karmaşıklaştırır.
Switch ifadelerinden kaçınılmalıdır. Switch ifadeleri genellikle uzun ve anlaşılması zordur.

Komut Sorgu Ayrımı, bir fonksiyonun ya bir şey yapan bir komut ya da bir değer döndüren bir sorgu olması gerektiğini, ancak her ikisini birden olmaması gerektiğini belirtir.
Başka bir deyişle, bir fonksiyon bir değeri değiştirirse, bir değer döndürmemelidir ve bir değer döndürürse, hiçbir değeri değiştirmemelidir.


```
public void delete(Page page) {
 try {
 deletePageAndAllReferences(page);
 }
 catch (Exception e) {
 logError(e);
 }
 }
 private void deletePageAndAllReferences(Page page) throws Exception {
 deletePage(page);
 registry.deleteReference(page.name);
 configKeys.deleteKey(page.name.makeKey());
 }
 private void logError(Exception e) {
 logger.log(e.getMessage());
 }
```

Yukarıdaki kod parçasında deletePageAndAllRferences() fonksiyonu bütün işi yapıyor olmasına rağmen delete fonksiyonunda hata yakalama yapılmış ve asıl kodun okunabilirliği ve değiştirilebilirliği sağlanmış.


Bölüm 4: Yorumlar 
Temiz kod yazmada amaç yoruma ihtiyaç duymadan kod yazabilmektir. Ancak bazı durumlarda kodumuzu açıklamak zorunda kalabiliriz bu gibi durumlarda,
kodumuzda değişiklik yaparak yorum yazmadan kaçınamıyorsak yorum yazabiliriz, her yorum yazdığımızda kendimizi daha az güvende hissetmeliyiz, çünkü yorum demek 
kendini açıklayamayan kod demektir.


Yazılan yorumlar, kod üzerinde yapılan güncellemelerden sonra ilgili kod bloğundan ayrılıp yetim kalabilir veya 
değişen kod ile bağlamından kopup yanlış yönlendirme yapılabilir. Bu sebeple yorum yapılmaması yersiz yorumdan daha iyidir. 
Kötü yazılmış bir kodu yorumla düzeltmeye çalışmayın! onun yerine kodu temizleyin. 

Kendimixi kodda açıklayınız, yorumla kodu açıklayacağınıza yazdığınız kod anlamlı isimlendirilsin ve kendini açıklayabilsin. Örneğin :

// Check to see if the employee is eligible for full benefits
if ((employee.flags & HOURLY_FLAG) && 
     (employee.age > 65))

we can eliminate the comment by creating a function that has name as the process and explains itself.

if (employee.isEligibleForFullBenefits())

Yasal Yorumlar: Bazen kod yazma standartları bize önemli yorumlar yazmamızı zorunlu kılar. Örneğin telif ve kaynak belirtmek için yorum yazmak zorunda kalabiliriz.
Yine de eğer mümkünse bu tarz yorumlar yapmak yerine bir standart lisans veya dışarıdaki bir dosyaya gömebilirsiniz.

Bilgi Veren Yorumlar: Bazı yorumlar bilgi verme amacı taşır mesela bir regular expression formatında hangi deseni yakalamaya çalışıldığını yorum ile anlatılabilir.
Örneğin:
// format matched kk:mm:ss EEE, MMM dd, yyyy
Pattern timeMatcher = Pattern.compile(
   " \\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*");

Niyet açıklayan yorumlar: Bilgi veren yorumların da ötesinde bir kod parçasında neyi amaçladığını anlatabilir. Bunu yaparken çok dikkatli olunmalıdır.

Açıklayıcı Yorumlar: bir kod parçasında bazı elemanların ne anlama geldiğini daha açık bir şekilde görülebilmesi için eklenebilir.
Örneğin: 
if(a.compareTo(b) == -1)    // a < b

Uyarı Amaccıyla Yazılan Yorumlar: Bazen programcı diğer programcıyı uyarmak için yorum yazabilir. 
// It takes avg. 5 minutes to run this code with 2.4 GHz CPU 

Yapılacaklar (TODO) Belirtmek İçin Yazılan Yorumlar: Eksik bırakılan ve yazılması gereken kodları unutmamak için 
veya planlamak için TODO'lar yorum olarak eklenebilir "//TODO: ... "

Amplifikasyon İçin Yazılan Yorumlar: Kod parçasının önemini vurgulamak için yorum yazılabilir.

KÖTÜ YORUMLAR
Herhangi bir işe yaramayan sadece yorum yazmak için yazılmış yorumlardır.
Örneğin:
/**
* The container event listeners for this Container.
*/
protected ArrayList listeners = new ArrayList();

Closing Brace Comments: Süslü parantez kapatışının sonrasında yazılan ve o kısmın hangi yapıya ait olduğunu betimleyen kodlardır.
Uzun ve iç içe geçmiş kodlarda mantıklı olsa da mümkün olduğunca kullanmaktan kaçınılmalıdır bunun yerine fonksiyonları kısaltmak daha makuldür.
Örneğin:
public class wc {
  public static void main(String[] args) {
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    String line;
    int lineCount = 0;
    int charCount = 0;
    int wordCount = 0;
    try {
         while ((line = in.readLine()) != null) {
        lineCount++;
        charCount += line.length();
        String words[] = line.split("\\W");
        wordCount += words.length;
      } //while
      System.out.println("wordCount = " + wordCount);
      System.out.println("lineCount = " + lineCount);
      System.out.println("charCount = " + charCount);
    } // try
    catch (IOException e) {
      System.err.println("Error:" + e.getMessage());
    } //catch
  } //main
}

Katkılar ve imzalar (Attributions and Bylines): Kodu ekleyen kişinin ismi & imzasının yazılması durumu günümüzde kullanışsızdır.
Versyion kontrol sistemleri sayesinde bu tarz yorumlar gereksizdir.
Örneğin: /* Added by Mustafa */

Yorum haline getirilmiş kod (Commented-Out Code): Bazı kodlar önemli görülerek yorum satırı haline getiriliyor. 
Bu kullanışsızdır çünkü o kodu çalıştırmayacaksan orada bulunması kafa karışıklığına sebebiyet verir.
Örneğin:
InputStreamResponse response = new InputStreamResponse();
response.setBody(formatter.getResultStream(), formatter.getByteCount());
// InputStream resultsStream = formatter.getResultStream();
// StreamReader reader = new StreamReader(resultsStream);
// response.setContent(reader.read(formatter.getByteCount()));

Yerel olmayan bilgi (Nonlocal Information): Bir kod parçasına -mesela javadoc- sistemla alakalo -global- bir yorum eklenmemeldir.
Örneğin:
/**
 * Port on which fitnesse would run. Defaults to <b>8082</b>.
 *
 * @param fitnessePort
 */
public void setFitnessePort(int fitnessePort)
{
this.fitnessePort = fitnessePort;
}

Aşırı Bilgi (Too Much Information): Yoruma konuyla ilgili gereksiz fazla bilgi eklenmemelidir.
 
EN İYİ YORUM YAZILMAMIŞ YORUMDUR :D
