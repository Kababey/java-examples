Bölüm 1: 
Bu bölüm, temiz kod kavramını ve neden önemli olduğunu ele alıyor.
Kötü kodun, yazılım projelerinde zamanla birikerek büyük sorunlara yol açabileceği, bakım maliyetini artırabileceği ve geliştirmeyi yavaşlatabileceği vurgulanıyor.
Temiz kod yazmanın bir zanaat olduğu, tıpkı diğer zanaatlar gibi ustalık gerektirdiği belirtiliyor.

Bölüm 2: Anlamlı İsimler
Bu bölüm, yazılımda kullanılan isimlerin (değişkenler, fonksiyonlar, sınıflar, paketler vb.) anlamlı ve açıklayıcı olması gerektiğini vurguluyor. 
Anlamlı isimler kullanmanın, kodun okunabilirliğini ve anlaşılırlığını artırdığı, böylece kodun bakımını ve geliştirilmesini kolaylaştırdığı belirtiliyor.
Bölümde, anlamlı isimler oluşturmak için kullanılabilecek bazı prensipler ve teknikler detaylandırılıyor:
Niyet Açığa Çıkaran İsimler Kullanın: Bir değişkenin veya fonksiyonun ne işe yaradığını ismiyle açıkça belirtin.
Yanlış Bilgi Vermeyin: İsimler, kodun işlevini doğru bir şekilde yansıtmalıdır.
Anlamlı Ayrımlar Yapın: Benzer isimler kullanarak karışıklığa neden olmaktan kaçının.
Telaffuz Edilebilir İsimler Kullanın: Kod hakkında konuşurken telaffuz edilebilir isimler kullanmak, iletişimi kolaylaştırır.
Aranabilir İsimler Kullanın: Kod içinde arama yaparken kolayca bulunabilecek isimler kullanın.
Kodlamalardan Kaçının: Macar Notasyonu gibi kodlamalar kullanmayın.
Zihinsel Haritalamadan Kaçının: İsimleri kısaltmayın veya kodun işlevini anlamak için zihinsel bir haritalama yapmayı gerektirmeyin.
Sezgisel Olmayın: Komik veya esprili isimler kullanmayın, açık ve net isimler tercih edin.
Kavram Başına Bir Kelime Seçin: Aynı kavram için farklı kelimeler kullanmaktan kaçının.
Kelime Oyunlarından Kaçının: İsimleri kelime oyunlarıyla karmaşıklaştırmayın.
Çözüm Alanı İsimleri Kullanın: Uygulama alanına özgü isimler kullanın.
Problem Alanı İsimleri Kullanın: Problem alanına özgü isimler kullanın.
Anlamlı Bağlam Ekleyin: İsimlere, gerektiğinde anlamlı bir bağlam ekleyin.
Gereksiz Bağlam Eklemeyin: İsimleri gereksiz uzatmayın.

Bölüm 3: Fonksiyonlar 
Küçük olmalı: fonksiyonların olabildiği kadar küçük olması gerekiyor
Tek bir şeyi yapmalı: bir fonksiyon yalnızca bir amacı gerçekleştirmek için yazılmalı, birden fazla iş yapıyorsa, anlaşılması ve test edilmesi daha zor olacaktır.
Tek amaçlılığı test etmenin bir yolu da, içerisinden başka isimde bir fonksiyon daha çıkarabiliyorsak o tek bir şeyi yapmıyor demektir.
Fonksiyonlar üstten alta okulmalıdır. Kod, yukarıdan aşağıya doğru okunan bir hikaye gibi okunmalıdır.
Biricik Soyutlama seviyesi.
Fonksiyon Argümanları: mümkünse 0 (niladic) gerekirse 1 (monadic) 2 (dyadic) de olabilir mümkünse 3 (triadic) kullanma
üçten fazlası (polyadic) çok özel gerekçe gerektirir o yüzden kullanılmamalı.
Fonksiyonlara "Flag" argümanları girmek doğru değildir ve fonksiyonu karmaşıklaştırır.
Switch ifadelerinden kaçınılmalıdır. Switch ifadeleri genellikle uzun ve anlaşılması zordur.

Komut Sorgu Ayrımı, bir fonksiyonun ya bir şey yapan bir komut ya da bir değer döndüren bir sorgu olması gerektiğini, ancak her ikisini birden olmaması gerektiğini belirtir.
Başka bir deyişle, bir fonksiyon bir değeri değiştirirse, bir değer döndürmemelidir ve bir değer döndürürse, hiçbir değeri değiştirmemelidir.


```
public void delete(Page page) {
 try {
 deletePageAndAllReferences(page);
 }
 catch (Exception e) {
 logError(e);
 }
 }
 private void deletePageAndAllReferences(Page page) throws Exception {
 deletePage(page);
 registry.deleteReference(page.name);
 configKeys.deleteKey(page.name.makeKey());
 }
 private void logError(Exception e) {
 logger.log(e.getMessage());
 }
```

Yukarıdaki kod parçasında deletePageAndAllRferences() fonksiyonu bütün işi yapıyor olmasına rağmen delete fonksiyonunda hata yakalama yapılmış ve asıl kodun okunabilirliği ve değiştirilebilirliği sağlanmış.


 
